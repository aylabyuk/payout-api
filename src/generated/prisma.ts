import { Prisma as BasePrisma, BasePrismaOptions } from 'prisma-binding'
import { GraphQLResolveInfo } from 'graphql'

const typeDefs = `
# THIS FILE HAS BEEN AUTO-GENERATED BY "PRISMA DEPLOY"
# DO NOT EDIT THIS FILE DIRECTLY

#
# Model Types
#

type DayOfWork implements Node {
  id: ID!
  person(where: PersonWhereInput): Person
  date: DateTime!
  startTime: DateTime!
  endTime: DateTime!
  amount: Int!
  paid: Boolean!
}

type Person implements Node {
  id: ID!
  firstName: String!
  lastName: String!
  gender: Gender!
  birthDate: DateTime!
  address: String!
  role(where: RoleWhereInput): Role
  daysOfWork(where: DayOfWorkWhereInput, orderBy: DayOfWorkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [DayOfWork!]
}

type Role implements Node {
  id: ID!
  name: String!
  description: String
  ratePerHour: Int!
  staffs(where: PersonWhereInput, orderBy: PersonOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Person!]
}

type User implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  email: String!
  password: String!
}


#
# Other Types
#

type AggregateDayOfWork {
  count: Int!
}

type AggregatePerson {
  count: Int!
}

type AggregateRole {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar DateTime

type DayOfWorkConnection {
  pageInfo: PageInfo!
  edges: [DayOfWorkEdge]!
  aggregate: AggregateDayOfWork!
}

input DayOfWorkCreateInput {
  date: DateTime!
  startTime: DateTime!
  endTime: DateTime!
  amount: Int!
  paid: Boolean
  person: PersonCreateOneWithoutDaysOfWorkInput
}

input DayOfWorkCreateManyWithoutPersonInput {
  create: [DayOfWorkCreateWithoutPersonInput!]
  connect: [DayOfWorkWhereUniqueInput!]
}

input DayOfWorkCreateWithoutPersonInput {
  date: DateTime!
  startTime: DateTime!
  endTime: DateTime!
  amount: Int!
  paid: Boolean
}

type DayOfWorkEdge {
  node: DayOfWork!
  cursor: String!
}

enum DayOfWorkOrderByInput {
  id_ASC
  id_DESC
  date_ASC
  date_DESC
  startTime_ASC
  startTime_DESC
  endTime_ASC
  endTime_DESC
  amount_ASC
  amount_DESC
  paid_ASC
  paid_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type DayOfWorkPreviousValues {
  id: ID!
  date: DateTime!
  startTime: DateTime!
  endTime: DateTime!
  amount: Int!
  paid: Boolean!
}

type DayOfWorkSubscriptionPayload {
  mutation: MutationType!
  node: DayOfWork
  updatedFields: [String!]
  previousValues: DayOfWorkPreviousValues
}

input DayOfWorkSubscriptionWhereInput {
  AND: [DayOfWorkSubscriptionWhereInput!]
  OR: [DayOfWorkSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: DayOfWorkWhereInput
}

input DayOfWorkUpdateInput {
  date: DateTime
  startTime: DateTime
  endTime: DateTime
  amount: Int
  paid: Boolean
  person: PersonUpdateOneWithoutDaysOfWorkInput
}

input DayOfWorkUpdateManyWithoutPersonInput {
  create: [DayOfWorkCreateWithoutPersonInput!]
  connect: [DayOfWorkWhereUniqueInput!]
  disconnect: [DayOfWorkWhereUniqueInput!]
  delete: [DayOfWorkWhereUniqueInput!]
  update: [DayOfWorkUpdateWithoutPersonInput!]
  upsert: [DayOfWorkUpsertWithoutPersonInput!]
}

input DayOfWorkUpdateWithoutPersonDataInput {
  date: DateTime
  startTime: DateTime
  endTime: DateTime
  amount: Int
  paid: Boolean
}

input DayOfWorkUpdateWithoutPersonInput {
  where: DayOfWorkWhereUniqueInput!
  data: DayOfWorkUpdateWithoutPersonDataInput!
}

input DayOfWorkUpsertWithoutPersonInput {
  where: DayOfWorkWhereUniqueInput!
  update: DayOfWorkUpdateWithoutPersonDataInput!
  create: DayOfWorkCreateWithoutPersonInput!
}

input DayOfWorkWhereInput {
  AND: [DayOfWorkWhereInput!]
  OR: [DayOfWorkWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  date: DateTime
  date_not: DateTime
  date_in: [DateTime!]
  date_not_in: [DateTime!]
  date_lt: DateTime
  date_lte: DateTime
  date_gt: DateTime
  date_gte: DateTime
  startTime: DateTime
  startTime_not: DateTime
  startTime_in: [DateTime!]
  startTime_not_in: [DateTime!]
  startTime_lt: DateTime
  startTime_lte: DateTime
  startTime_gt: DateTime
  startTime_gte: DateTime
  endTime: DateTime
  endTime_not: DateTime
  endTime_in: [DateTime!]
  endTime_not_in: [DateTime!]
  endTime_lt: DateTime
  endTime_lte: DateTime
  endTime_gt: DateTime
  endTime_gte: DateTime
  amount: Int
  amount_not: Int
  amount_in: [Int!]
  amount_not_in: [Int!]
  amount_lt: Int
  amount_lte: Int
  amount_gt: Int
  amount_gte: Int
  paid: Boolean
  paid_not: Boolean
  person: PersonWhereInput
}

input DayOfWorkWhereUniqueInput {
  id: ID
}

enum Gender {
  MALE
  FEMALE
}

scalar Long

type Mutation {
  createPerson(data: PersonCreateInput!): Person!
  createRole(data: RoleCreateInput!): Role!
  createDayOfWork(data: DayOfWorkCreateInput!): DayOfWork!
  createUser(data: UserCreateInput!): User!
  updatePerson(data: PersonUpdateInput!, where: PersonWhereUniqueInput!): Person
  updateRole(data: RoleUpdateInput!, where: RoleWhereUniqueInput!): Role
  updateDayOfWork(data: DayOfWorkUpdateInput!, where: DayOfWorkWhereUniqueInput!): DayOfWork
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  deletePerson(where: PersonWhereUniqueInput!): Person
  deleteRole(where: RoleWhereUniqueInput!): Role
  deleteDayOfWork(where: DayOfWorkWhereUniqueInput!): DayOfWork
  deleteUser(where: UserWhereUniqueInput!): User
  upsertPerson(where: PersonWhereUniqueInput!, create: PersonCreateInput!, update: PersonUpdateInput!): Person!
  upsertRole(where: RoleWhereUniqueInput!, create: RoleCreateInput!, update: RoleUpdateInput!): Role!
  upsertDayOfWork(where: DayOfWorkWhereUniqueInput!, create: DayOfWorkCreateInput!, update: DayOfWorkUpdateInput!): DayOfWork!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  updateManyPersons(data: PersonUpdateInput!, where: PersonWhereInput!): BatchPayload!
  updateManyRoles(data: RoleUpdateInput!, where: RoleWhereInput!): BatchPayload!
  updateManyDayOfWorks(data: DayOfWorkUpdateInput!, where: DayOfWorkWhereInput!): BatchPayload!
  updateManyUsers(data: UserUpdateInput!, where: UserWhereInput!): BatchPayload!
  deleteManyPersons(where: PersonWhereInput!): BatchPayload!
  deleteManyRoles(where: RoleWhereInput!): BatchPayload!
  deleteManyDayOfWorks(where: DayOfWorkWhereInput!): BatchPayload!
  deleteManyUsers(where: UserWhereInput!): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type PersonConnection {
  pageInfo: PageInfo!
  edges: [PersonEdge]!
  aggregate: AggregatePerson!
}

input PersonCreateInput {
  firstName: String!
  lastName: String!
  gender: Gender!
  birthDate: DateTime!
  address: String!
  role: RoleCreateOneWithoutStaffsInput
  daysOfWork: DayOfWorkCreateManyWithoutPersonInput
}

input PersonCreateManyWithoutRoleInput {
  create: [PersonCreateWithoutRoleInput!]
  connect: [PersonWhereUniqueInput!]
}

input PersonCreateOneWithoutDaysOfWorkInput {
  create: PersonCreateWithoutDaysOfWorkInput
  connect: PersonWhereUniqueInput
}

input PersonCreateWithoutDaysOfWorkInput {
  firstName: String!
  lastName: String!
  gender: Gender!
  birthDate: DateTime!
  address: String!
  role: RoleCreateOneWithoutStaffsInput
}

input PersonCreateWithoutRoleInput {
  firstName: String!
  lastName: String!
  gender: Gender!
  birthDate: DateTime!
  address: String!
  daysOfWork: DayOfWorkCreateManyWithoutPersonInput
}

type PersonEdge {
  node: Person!
  cursor: String!
}

enum PersonOrderByInput {
  id_ASC
  id_DESC
  firstName_ASC
  firstName_DESC
  lastName_ASC
  lastName_DESC
  gender_ASC
  gender_DESC
  birthDate_ASC
  birthDate_DESC
  address_ASC
  address_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type PersonPreviousValues {
  id: ID!
  firstName: String!
  lastName: String!
  gender: Gender!
  birthDate: DateTime!
  address: String!
}

type PersonSubscriptionPayload {
  mutation: MutationType!
  node: Person
  updatedFields: [String!]
  previousValues: PersonPreviousValues
}

input PersonSubscriptionWhereInput {
  AND: [PersonSubscriptionWhereInput!]
  OR: [PersonSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PersonWhereInput
}

input PersonUpdateInput {
  firstName: String
  lastName: String
  gender: Gender
  birthDate: DateTime
  address: String
  role: RoleUpdateOneWithoutStaffsInput
  daysOfWork: DayOfWorkUpdateManyWithoutPersonInput
}

input PersonUpdateManyWithoutRoleInput {
  create: [PersonCreateWithoutRoleInput!]
  connect: [PersonWhereUniqueInput!]
  disconnect: [PersonWhereUniqueInput!]
  delete: [PersonWhereUniqueInput!]
  update: [PersonUpdateWithoutRoleInput!]
  upsert: [PersonUpsertWithoutRoleInput!]
}

input PersonUpdateOneWithoutDaysOfWorkInput {
  create: PersonCreateWithoutDaysOfWorkInput
  connect: PersonWhereUniqueInput
  disconnect: PersonWhereUniqueInput
  delete: PersonWhereUniqueInput
  update: PersonUpdateWithoutDaysOfWorkInput
  upsert: PersonUpsertWithoutDaysOfWorkInput
}

input PersonUpdateWithoutDaysOfWorkDataInput {
  firstName: String
  lastName: String
  gender: Gender
  birthDate: DateTime
  address: String
  role: RoleUpdateOneWithoutStaffsInput
}

input PersonUpdateWithoutDaysOfWorkInput {
  where: PersonWhereUniqueInput!
  data: PersonUpdateWithoutDaysOfWorkDataInput!
}

input PersonUpdateWithoutRoleDataInput {
  firstName: String
  lastName: String
  gender: Gender
  birthDate: DateTime
  address: String
  daysOfWork: DayOfWorkUpdateManyWithoutPersonInput
}

input PersonUpdateWithoutRoleInput {
  where: PersonWhereUniqueInput!
  data: PersonUpdateWithoutRoleDataInput!
}

input PersonUpsertWithoutDaysOfWorkInput {
  where: PersonWhereUniqueInput!
  update: PersonUpdateWithoutDaysOfWorkDataInput!
  create: PersonCreateWithoutDaysOfWorkInput!
}

input PersonUpsertWithoutRoleInput {
  where: PersonWhereUniqueInput!
  update: PersonUpdateWithoutRoleDataInput!
  create: PersonCreateWithoutRoleInput!
}

input PersonWhereInput {
  AND: [PersonWhereInput!]
  OR: [PersonWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  firstName: String
  firstName_not: String
  firstName_in: [String!]
  firstName_not_in: [String!]
  firstName_lt: String
  firstName_lte: String
  firstName_gt: String
  firstName_gte: String
  firstName_contains: String
  firstName_not_contains: String
  firstName_starts_with: String
  firstName_not_starts_with: String
  firstName_ends_with: String
  firstName_not_ends_with: String
  lastName: String
  lastName_not: String
  lastName_in: [String!]
  lastName_not_in: [String!]
  lastName_lt: String
  lastName_lte: String
  lastName_gt: String
  lastName_gte: String
  lastName_contains: String
  lastName_not_contains: String
  lastName_starts_with: String
  lastName_not_starts_with: String
  lastName_ends_with: String
  lastName_not_ends_with: String
  gender: Gender
  gender_not: Gender
  gender_in: [Gender!]
  gender_not_in: [Gender!]
  birthDate: DateTime
  birthDate_not: DateTime
  birthDate_in: [DateTime!]
  birthDate_not_in: [DateTime!]
  birthDate_lt: DateTime
  birthDate_lte: DateTime
  birthDate_gt: DateTime
  birthDate_gte: DateTime
  address: String
  address_not: String
  address_in: [String!]
  address_not_in: [String!]
  address_lt: String
  address_lte: String
  address_gt: String
  address_gte: String
  address_contains: String
  address_not_contains: String
  address_starts_with: String
  address_not_starts_with: String
  address_ends_with: String
  address_not_ends_with: String
  role: RoleWhereInput
  daysOfWork_every: DayOfWorkWhereInput
  daysOfWork_some: DayOfWorkWhereInput
  daysOfWork_none: DayOfWorkWhereInput
}

input PersonWhereUniqueInput {
  id: ID
}

type Query {
  persons(where: PersonWhereInput, orderBy: PersonOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Person]!
  roles(where: RoleWhereInput, orderBy: RoleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Role]!
  dayOfWorks(where: DayOfWorkWhereInput, orderBy: DayOfWorkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [DayOfWork]!
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  person(where: PersonWhereUniqueInput!): Person
  role(where: RoleWhereUniqueInput!): Role
  dayOfWork(where: DayOfWorkWhereUniqueInput!): DayOfWork
  user(where: UserWhereUniqueInput!): User
  personsConnection(where: PersonWhereInput, orderBy: PersonOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PersonConnection!
  rolesConnection(where: RoleWhereInput, orderBy: RoleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): RoleConnection!
  dayOfWorksConnection(where: DayOfWorkWhereInput, orderBy: DayOfWorkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): DayOfWorkConnection!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type RoleConnection {
  pageInfo: PageInfo!
  edges: [RoleEdge]!
  aggregate: AggregateRole!
}

input RoleCreateInput {
  name: String!
  description: String
  ratePerHour: Int!
  staffs: PersonCreateManyWithoutRoleInput
}

input RoleCreateOneWithoutStaffsInput {
  create: RoleCreateWithoutStaffsInput
  connect: RoleWhereUniqueInput
}

input RoleCreateWithoutStaffsInput {
  name: String!
  description: String
  ratePerHour: Int!
}

type RoleEdge {
  node: Role!
  cursor: String!
}

enum RoleOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  ratePerHour_ASC
  ratePerHour_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type RolePreviousValues {
  id: ID!
  name: String!
  description: String
  ratePerHour: Int!
}

type RoleSubscriptionPayload {
  mutation: MutationType!
  node: Role
  updatedFields: [String!]
  previousValues: RolePreviousValues
}

input RoleSubscriptionWhereInput {
  AND: [RoleSubscriptionWhereInput!]
  OR: [RoleSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: RoleWhereInput
}

input RoleUpdateInput {
  name: String
  description: String
  ratePerHour: Int
  staffs: PersonUpdateManyWithoutRoleInput
}

input RoleUpdateOneWithoutStaffsInput {
  create: RoleCreateWithoutStaffsInput
  connect: RoleWhereUniqueInput
  disconnect: RoleWhereUniqueInput
  delete: RoleWhereUniqueInput
  update: RoleUpdateWithoutStaffsInput
  upsert: RoleUpsertWithoutStaffsInput
}

input RoleUpdateWithoutStaffsDataInput {
  name: String
  description: String
  ratePerHour: Int
}

input RoleUpdateWithoutStaffsInput {
  where: RoleWhereUniqueInput!
  data: RoleUpdateWithoutStaffsDataInput!
}

input RoleUpsertWithoutStaffsInput {
  where: RoleWhereUniqueInput!
  update: RoleUpdateWithoutStaffsDataInput!
  create: RoleCreateWithoutStaffsInput!
}

input RoleWhereInput {
  AND: [RoleWhereInput!]
  OR: [RoleWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  ratePerHour: Int
  ratePerHour_not: Int
  ratePerHour_in: [Int!]
  ratePerHour_not_in: [Int!]
  ratePerHour_lt: Int
  ratePerHour_lte: Int
  ratePerHour_gt: Int
  ratePerHour_gte: Int
  staffs_every: PersonWhereInput
  staffs_some: PersonWhereInput
  staffs_none: PersonWhereInput
}

input RoleWhereUniqueInput {
  id: ID
  name: String
}

type Subscription {
  person(where: PersonSubscriptionWhereInput): PersonSubscriptionPayload
  role(where: RoleSubscriptionWhereInput): RoleSubscriptionPayload
  dayOfWork(where: DayOfWorkSubscriptionWhereInput): DayOfWorkSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  email: String!
  password: String!
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
}

type UserPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  email: String!
  password: String!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateInput {
  email: String
  password: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
`

export type PersonOrderByInput = 
  'id_ASC' |
  'id_DESC' |
  'firstName_ASC' |
  'firstName_DESC' |
  'lastName_ASC' |
  'lastName_DESC' |
  'gender_ASC' |
  'gender_DESC' |
  'birthDate_ASC' |
  'birthDate_DESC' |
  'address_ASC' |
  'address_DESC' |
  'updatedAt_ASC' |
  'updatedAt_DESC' |
  'createdAt_ASC' |
  'createdAt_DESC'

export type DayOfWorkOrderByInput = 
  'id_ASC' |
  'id_DESC' |
  'date_ASC' |
  'date_DESC' |
  'startTime_ASC' |
  'startTime_DESC' |
  'endTime_ASC' |
  'endTime_DESC' |
  'amount_ASC' |
  'amount_DESC' |
  'paid_ASC' |
  'paid_DESC' |
  'updatedAt_ASC' |
  'updatedAt_DESC' |
  'createdAt_ASC' |
  'createdAt_DESC'

export type RoleOrderByInput = 
  'id_ASC' |
  'id_DESC' |
  'name_ASC' |
  'name_DESC' |
  'description_ASC' |
  'description_DESC' |
  'ratePerHour_ASC' |
  'ratePerHour_DESC' |
  'updatedAt_ASC' |
  'updatedAt_DESC' |
  'createdAt_ASC' |
  'createdAt_DESC'

export type UserOrderByInput = 
  'id_ASC' |
  'id_DESC' |
  'createdAt_ASC' |
  'createdAt_DESC' |
  'updatedAt_ASC' |
  'updatedAt_DESC' |
  'email_ASC' |
  'email_DESC' |
  'password_ASC' |
  'password_DESC'

export type Gender = 
  'MALE' |
  'FEMALE'

export type MutationType = 
  'CREATED' |
  'UPDATED' |
  'DELETED'

export interface RoleCreateInput {
  name: String
  description?: String
  ratePerHour: Int
  staffs?: PersonCreateManyWithoutRoleInput
}

export interface PersonWhereInput {
  AND?: PersonWhereInput[] | PersonWhereInput
  OR?: PersonWhereInput[] | PersonWhereInput
  id?: ID_Input
  id_not?: ID_Input
  id_in?: ID_Input[] | ID_Input
  id_not_in?: ID_Input[] | ID_Input
  id_lt?: ID_Input
  id_lte?: ID_Input
  id_gt?: ID_Input
  id_gte?: ID_Input
  id_contains?: ID_Input
  id_not_contains?: ID_Input
  id_starts_with?: ID_Input
  id_not_starts_with?: ID_Input
  id_ends_with?: ID_Input
  id_not_ends_with?: ID_Input
  firstName?: String
  firstName_not?: String
  firstName_in?: String[] | String
  firstName_not_in?: String[] | String
  firstName_lt?: String
  firstName_lte?: String
  firstName_gt?: String
  firstName_gte?: String
  firstName_contains?: String
  firstName_not_contains?: String
  firstName_starts_with?: String
  firstName_not_starts_with?: String
  firstName_ends_with?: String
  firstName_not_ends_with?: String
  lastName?: String
  lastName_not?: String
  lastName_in?: String[] | String
  lastName_not_in?: String[] | String
  lastName_lt?: String
  lastName_lte?: String
  lastName_gt?: String
  lastName_gte?: String
  lastName_contains?: String
  lastName_not_contains?: String
  lastName_starts_with?: String
  lastName_not_starts_with?: String
  lastName_ends_with?: String
  lastName_not_ends_with?: String
  gender?: Gender
  gender_not?: Gender
  gender_in?: Gender[] | Gender
  gender_not_in?: Gender[] | Gender
  birthDate?: DateTime
  birthDate_not?: DateTime
  birthDate_in?: DateTime[] | DateTime
  birthDate_not_in?: DateTime[] | DateTime
  birthDate_lt?: DateTime
  birthDate_lte?: DateTime
  birthDate_gt?: DateTime
  birthDate_gte?: DateTime
  address?: String
  address_not?: String
  address_in?: String[] | String
  address_not_in?: String[] | String
  address_lt?: String
  address_lte?: String
  address_gt?: String
  address_gte?: String
  address_contains?: String
  address_not_contains?: String
  address_starts_with?: String
  address_not_starts_with?: String
  address_ends_with?: String
  address_not_ends_with?: String
  role?: RoleWhereInput
  daysOfWork_every?: DayOfWorkWhereInput
  daysOfWork_some?: DayOfWorkWhereInput
  daysOfWork_none?: DayOfWorkWhereInput
}

export interface PersonUpdateManyWithoutRoleInput {
  create?: PersonCreateWithoutRoleInput[] | PersonCreateWithoutRoleInput
  connect?: PersonWhereUniqueInput[] | PersonWhereUniqueInput
  disconnect?: PersonWhereUniqueInput[] | PersonWhereUniqueInput
  delete?: PersonWhereUniqueInput[] | PersonWhereUniqueInput
  update?: PersonUpdateWithoutRoleInput[] | PersonUpdateWithoutRoleInput
  upsert?: PersonUpsertWithoutRoleInput[] | PersonUpsertWithoutRoleInput
}

export interface RoleUpdateWithoutStaffsDataInput {
  name?: String
  description?: String
  ratePerHour?: Int
}

export interface RoleUpdateInput {
  name?: String
  description?: String
  ratePerHour?: Int
  staffs?: PersonUpdateManyWithoutRoleInput
}

export interface PersonCreateOneWithoutDaysOfWorkInput {
  create?: PersonCreateWithoutDaysOfWorkInput
  connect?: PersonWhereUniqueInput
}

export interface DayOfWorkUpsertWithoutPersonInput {
  where: DayOfWorkWhereUniqueInput
  update: DayOfWorkUpdateWithoutPersonDataInput
  create: DayOfWorkCreateWithoutPersonInput
}

export interface RoleSubscriptionWhereInput {
  AND?: RoleSubscriptionWhereInput[] | RoleSubscriptionWhereInput
  OR?: RoleSubscriptionWhereInput[] | RoleSubscriptionWhereInput
  mutation_in?: MutationType[] | MutationType
  updatedFields_contains?: String
  updatedFields_contains_every?: String[] | String
  updatedFields_contains_some?: String[] | String
  node?: RoleWhereInput
}

export interface DayOfWorkUpdateWithoutPersonDataInput {
  date?: DateTime
  startTime?: DateTime
  endTime?: DateTime
  amount?: Int
  paid?: Boolean
}

export interface RoleWhereInput {
  AND?: RoleWhereInput[] | RoleWhereInput
  OR?: RoleWhereInput[] | RoleWhereInput
  id?: ID_Input
  id_not?: ID_Input
  id_in?: ID_Input[] | ID_Input
  id_not_in?: ID_Input[] | ID_Input
  id_lt?: ID_Input
  id_lte?: ID_Input
  id_gt?: ID_Input
  id_gte?: ID_Input
  id_contains?: ID_Input
  id_not_contains?: ID_Input
  id_starts_with?: ID_Input
  id_not_starts_with?: ID_Input
  id_ends_with?: ID_Input
  id_not_ends_with?: ID_Input
  name?: String
  name_not?: String
  name_in?: String[] | String
  name_not_in?: String[] | String
  name_lt?: String
  name_lte?: String
  name_gt?: String
  name_gte?: String
  name_contains?: String
  name_not_contains?: String
  name_starts_with?: String
  name_not_starts_with?: String
  name_ends_with?: String
  name_not_ends_with?: String
  description?: String
  description_not?: String
  description_in?: String[] | String
  description_not_in?: String[] | String
  description_lt?: String
  description_lte?: String
  description_gt?: String
  description_gte?: String
  description_contains?: String
  description_not_contains?: String
  description_starts_with?: String
  description_not_starts_with?: String
  description_ends_with?: String
  description_not_ends_with?: String
  ratePerHour?: Int
  ratePerHour_not?: Int
  ratePerHour_in?: Int[] | Int
  ratePerHour_not_in?: Int[] | Int
  ratePerHour_lt?: Int
  ratePerHour_lte?: Int
  ratePerHour_gt?: Int
  ratePerHour_gte?: Int
  staffs_every?: PersonWhereInput
  staffs_some?: PersonWhereInput
  staffs_none?: PersonWhereInput
}

export interface DayOfWorkUpdateWithoutPersonInput {
  where: DayOfWorkWhereUniqueInput
  data: DayOfWorkUpdateWithoutPersonDataInput
}

export interface UserUpdateInput {
  email?: String
  password?: String
}

export interface DayOfWorkUpdateManyWithoutPersonInput {
  create?: DayOfWorkCreateWithoutPersonInput[] | DayOfWorkCreateWithoutPersonInput
  connect?: DayOfWorkWhereUniqueInput[] | DayOfWorkWhereUniqueInput
  disconnect?: DayOfWorkWhereUniqueInput[] | DayOfWorkWhereUniqueInput
  delete?: DayOfWorkWhereUniqueInput[] | DayOfWorkWhereUniqueInput
  update?: DayOfWorkUpdateWithoutPersonInput[] | DayOfWorkUpdateWithoutPersonInput
  upsert?: DayOfWorkUpsertWithoutPersonInput[] | DayOfWorkUpsertWithoutPersonInput
}

export interface PersonWhereUniqueInput {
  id?: ID_Input
}

export interface PersonCreateInput {
  firstName: String
  lastName: String
  gender: Gender
  birthDate: DateTime
  address: String
  role?: RoleCreateOneWithoutStaffsInput
  daysOfWork?: DayOfWorkCreateManyWithoutPersonInput
}

export interface DayOfWorkWhereUniqueInput {
  id?: ID_Input
}

export interface RoleCreateOneWithoutStaffsInput {
  create?: RoleCreateWithoutStaffsInput
  connect?: RoleWhereUniqueInput
}

export interface PersonUpdateWithoutDaysOfWorkDataInput {
  firstName?: String
  lastName?: String
  gender?: Gender
  birthDate?: DateTime
  address?: String
  role?: RoleUpdateOneWithoutStaffsInput
}

export interface RoleCreateWithoutStaffsInput {
  name: String
  description?: String
  ratePerHour: Int
}

export interface PersonUpdateOneWithoutDaysOfWorkInput {
  create?: PersonCreateWithoutDaysOfWorkInput
  connect?: PersonWhereUniqueInput
  disconnect?: PersonWhereUniqueInput
  delete?: PersonWhereUniqueInput
  update?: PersonUpdateWithoutDaysOfWorkInput
  upsert?: PersonUpsertWithoutDaysOfWorkInput
}

export interface DayOfWorkCreateManyWithoutPersonInput {
  create?: DayOfWorkCreateWithoutPersonInput[] | DayOfWorkCreateWithoutPersonInput
  connect?: DayOfWorkWhereUniqueInput[] | DayOfWorkWhereUniqueInput
}

export interface PersonUpsertWithoutRoleInput {
  where: PersonWhereUniqueInput
  update: PersonUpdateWithoutRoleDataInput
  create: PersonCreateWithoutRoleInput
}

export interface DayOfWorkCreateWithoutPersonInput {
  date: DateTime
  startTime: DateTime
  endTime: DateTime
  amount: Int
  paid?: Boolean
}

export interface PersonUpdateWithoutRoleInput {
  where: PersonWhereUniqueInput
  data: PersonUpdateWithoutRoleDataInput
}

export interface RoleUpsertWithoutStaffsInput {
  where: RoleWhereUniqueInput
  update: RoleUpdateWithoutStaffsDataInput
  create: RoleCreateWithoutStaffsInput
}

export interface DayOfWorkSubscriptionWhereInput {
  AND?: DayOfWorkSubscriptionWhereInput[] | DayOfWorkSubscriptionWhereInput
  OR?: DayOfWorkSubscriptionWhereInput[] | DayOfWorkSubscriptionWhereInput
  mutation_in?: MutationType[] | MutationType
  updatedFields_contains?: String
  updatedFields_contains_every?: String[] | String
  updatedFields_contains_some?: String[] | String
  node?: DayOfWorkWhereInput
}

export interface PersonCreateManyWithoutRoleInput {
  create?: PersonCreateWithoutRoleInput[] | PersonCreateWithoutRoleInput
  connect?: PersonWhereUniqueInput[] | PersonWhereUniqueInput
}

export interface UserWhereInput {
  AND?: UserWhereInput[] | UserWhereInput
  OR?: UserWhereInput[] | UserWhereInput
  id?: ID_Input
  id_not?: ID_Input
  id_in?: ID_Input[] | ID_Input
  id_not_in?: ID_Input[] | ID_Input
  id_lt?: ID_Input
  id_lte?: ID_Input
  id_gt?: ID_Input
  id_gte?: ID_Input
  id_contains?: ID_Input
  id_not_contains?: ID_Input
  id_starts_with?: ID_Input
  id_not_starts_with?: ID_Input
  id_ends_with?: ID_Input
  id_not_ends_with?: ID_Input
  createdAt?: DateTime
  createdAt_not?: DateTime
  createdAt_in?: DateTime[] | DateTime
  createdAt_not_in?: DateTime[] | DateTime
  createdAt_lt?: DateTime
  createdAt_lte?: DateTime
  createdAt_gt?: DateTime
  createdAt_gte?: DateTime
  updatedAt?: DateTime
  updatedAt_not?: DateTime
  updatedAt_in?: DateTime[] | DateTime
  updatedAt_not_in?: DateTime[] | DateTime
  updatedAt_lt?: DateTime
  updatedAt_lte?: DateTime
  updatedAt_gt?: DateTime
  updatedAt_gte?: DateTime
  email?: String
  email_not?: String
  email_in?: String[] | String
  email_not_in?: String[] | String
  email_lt?: String
  email_lte?: String
  email_gt?: String
  email_gte?: String
  email_contains?: String
  email_not_contains?: String
  email_starts_with?: String
  email_not_starts_with?: String
  email_ends_with?: String
  email_not_ends_with?: String
  password?: String
  password_not?: String
  password_in?: String[] | String
  password_not_in?: String[] | String
  password_lt?: String
  password_lte?: String
  password_gt?: String
  password_gte?: String
  password_contains?: String
  password_not_contains?: String
  password_starts_with?: String
  password_not_starts_with?: String
  password_ends_with?: String
  password_not_ends_with?: String
}

export interface PersonCreateWithoutRoleInput {
  firstName: String
  lastName: String
  gender: Gender
  birthDate: DateTime
  address: String
  daysOfWork?: DayOfWorkCreateManyWithoutPersonInput
}

export interface RoleWhereUniqueInput {
  id?: ID_Input
  name?: String
}

export interface DayOfWorkCreateInput {
  date: DateTime
  startTime: DateTime
  endTime: DateTime
  amount: Int
  paid?: Boolean
  person?: PersonCreateOneWithoutDaysOfWorkInput
}

export interface PersonUpdateWithoutDaysOfWorkInput {
  where: PersonWhereUniqueInput
  data: PersonUpdateWithoutDaysOfWorkDataInput
}

export interface DayOfWorkWhereInput {
  AND?: DayOfWorkWhereInput[] | DayOfWorkWhereInput
  OR?: DayOfWorkWhereInput[] | DayOfWorkWhereInput
  id?: ID_Input
  id_not?: ID_Input
  id_in?: ID_Input[] | ID_Input
  id_not_in?: ID_Input[] | ID_Input
  id_lt?: ID_Input
  id_lte?: ID_Input
  id_gt?: ID_Input
  id_gte?: ID_Input
  id_contains?: ID_Input
  id_not_contains?: ID_Input
  id_starts_with?: ID_Input
  id_not_starts_with?: ID_Input
  id_ends_with?: ID_Input
  id_not_ends_with?: ID_Input
  date?: DateTime
  date_not?: DateTime
  date_in?: DateTime[] | DateTime
  date_not_in?: DateTime[] | DateTime
  date_lt?: DateTime
  date_lte?: DateTime
  date_gt?: DateTime
  date_gte?: DateTime
  startTime?: DateTime
  startTime_not?: DateTime
  startTime_in?: DateTime[] | DateTime
  startTime_not_in?: DateTime[] | DateTime
  startTime_lt?: DateTime
  startTime_lte?: DateTime
  startTime_gt?: DateTime
  startTime_gte?: DateTime
  endTime?: DateTime
  endTime_not?: DateTime
  endTime_in?: DateTime[] | DateTime
  endTime_not_in?: DateTime[] | DateTime
  endTime_lt?: DateTime
  endTime_lte?: DateTime
  endTime_gt?: DateTime
  endTime_gte?: DateTime
  amount?: Int
  amount_not?: Int
  amount_in?: Int[] | Int
  amount_not_in?: Int[] | Int
  amount_lt?: Int
  amount_lte?: Int
  amount_gt?: Int
  amount_gte?: Int
  paid?: Boolean
  paid_not?: Boolean
  person?: PersonWhereInput
}

export interface PersonUpdateWithoutRoleDataInput {
  firstName?: String
  lastName?: String
  gender?: Gender
  birthDate?: DateTime
  address?: String
  daysOfWork?: DayOfWorkUpdateManyWithoutPersonInput
}

export interface PersonCreateWithoutDaysOfWorkInput {
  firstName: String
  lastName: String
  gender: Gender
  birthDate: DateTime
  address: String
  role?: RoleCreateOneWithoutStaffsInput
}

export interface PersonSubscriptionWhereInput {
  AND?: PersonSubscriptionWhereInput[] | PersonSubscriptionWhereInput
  OR?: PersonSubscriptionWhereInput[] | PersonSubscriptionWhereInput
  mutation_in?: MutationType[] | MutationType
  updatedFields_contains?: String
  updatedFields_contains_every?: String[] | String
  updatedFields_contains_some?: String[] | String
  node?: PersonWhereInput
}

export interface RoleUpdateWithoutStaffsInput {
  where: RoleWhereUniqueInput
  data: RoleUpdateWithoutStaffsDataInput
}

export interface RoleUpdateOneWithoutStaffsInput {
  create?: RoleCreateWithoutStaffsInput
  connect?: RoleWhereUniqueInput
  disconnect?: RoleWhereUniqueInput
  delete?: RoleWhereUniqueInput
  update?: RoleUpdateWithoutStaffsInput
  upsert?: RoleUpsertWithoutStaffsInput
}

export interface PersonUpdateInput {
  firstName?: String
  lastName?: String
  gender?: Gender
  birthDate?: DateTime
  address?: String
  role?: RoleUpdateOneWithoutStaffsInput
  daysOfWork?: DayOfWorkUpdateManyWithoutPersonInput
}

export interface UserCreateInput {
  email: String
  password: String
}

export interface PersonUpsertWithoutDaysOfWorkInput {
  where: PersonWhereUniqueInput
  update: PersonUpdateWithoutDaysOfWorkDataInput
  create: PersonCreateWithoutDaysOfWorkInput
}

export interface UserSubscriptionWhereInput {
  AND?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput
  OR?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput
  mutation_in?: MutationType[] | MutationType
  updatedFields_contains?: String
  updatedFields_contains_every?: String[] | String
  updatedFields_contains_some?: String[] | String
  node?: UserWhereInput
}

export interface DayOfWorkUpdateInput {
  date?: DateTime
  startTime?: DateTime
  endTime?: DateTime
  amount?: Int
  paid?: Boolean
  person?: PersonUpdateOneWithoutDaysOfWorkInput
}

export interface UserWhereUniqueInput {
  id?: ID_Input
  email?: String
}

export interface Node {
  id: ID_Output
}

export interface UserPreviousValues {
  id: ID_Output
  createdAt: DateTime
  updatedAt: DateTime
  email: String
  password: String
}

export interface User extends Node {
  id: ID_Output
  createdAt: DateTime
  updatedAt: DateTime
  email: String
  password: String
}

export interface DayOfWorkSubscriptionPayload {
  mutation: MutationType
  node?: DayOfWork
  updatedFields?: String[]
  previousValues?: DayOfWorkPreviousValues
}

export interface AggregateUser {
  count: Int
}

export interface UserConnection {
  pageInfo: PageInfo
  edges: UserEdge[]
  aggregate: AggregateUser
}

export interface BatchPayload {
  count: Long
}

export interface DayOfWorkEdge {
  node: DayOfWork
  cursor: String
}

export interface UserSubscriptionPayload {
  mutation: MutationType
  node?: User
  updatedFields?: String[]
  previousValues?: UserPreviousValues
}

export interface AggregateRole {
  count: Int
}

export interface DayOfWork extends Node {
  id: ID_Output
  person?: Person
  date: DateTime
  startTime: DateTime
  endTime: DateTime
  amount: Int
  paid: Boolean
}

export interface RoleConnection {
  pageInfo: PageInfo
  edges: RoleEdge[]
  aggregate: AggregateRole
}

export interface Person extends Node {
  id: ID_Output
  firstName: String
  lastName: String
  gender: Gender
  birthDate: DateTime
  address: String
  role?: Role
  daysOfWork?: DayOfWork[]
}

export interface PersonEdge {
  node: Person
  cursor: String
}

export interface PersonSubscriptionPayload {
  mutation: MutationType
  node?: Person
  updatedFields?: String[]
  previousValues?: PersonPreviousValues
}

export interface PersonConnection {
  pageInfo: PageInfo
  edges: PersonEdge[]
  aggregate: AggregatePerson
}

export interface PersonPreviousValues {
  id: ID_Output
  firstName: String
  lastName: String
  gender: Gender
  birthDate: DateTime
  address: String
}

export interface AggregateDayOfWork {
  count: Int
}

export interface Role extends Node {
  id: ID_Output
  name: String
  description?: String
  ratePerHour: Int
  staffs?: Person[]
}

export interface RolePreviousValues {
  id: ID_Output
  name: String
  description?: String
  ratePerHour: Int
}

export interface RoleSubscriptionPayload {
  mutation: MutationType
  node?: Role
  updatedFields?: String[]
  previousValues?: RolePreviousValues
}

export interface DayOfWorkPreviousValues {
  id: ID_Output
  date: DateTime
  startTime: DateTime
  endTime: DateTime
  amount: Int
  paid: Boolean
}

export interface DayOfWorkConnection {
  pageInfo: PageInfo
  edges: DayOfWorkEdge[]
  aggregate: AggregateDayOfWork
}

export interface UserEdge {
  node: User
  cursor: String
}

export interface PageInfo {
  hasNextPage: Boolean
  hasPreviousPage: Boolean
  startCursor?: String
  endCursor?: String
}

export interface AggregatePerson {
  count: Int
}

export interface RoleEdge {
  node: Role
  cursor: String
}

export type DateTime = string

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number
export type ID_Output = string

export type Long = string

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number

export interface Schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

export type Query = {
  persons: (args: { where?: PersonWhereInput, orderBy?: PersonOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<Person[]>
  roles: (args: { where?: RoleWhereInput, orderBy?: RoleOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<Role[]>
  dayOfWorks: (args: { where?: DayOfWorkWhereInput, orderBy?: DayOfWorkOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<DayOfWork[]>
  users: (args: { where?: UserWhereInput, orderBy?: UserOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<User[]>
  person: (args: { where: PersonWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Person | null>
  role: (args: { where: RoleWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Role | null>
  dayOfWork: (args: { where: DayOfWorkWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<DayOfWork | null>
  user: (args: { where: UserWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<User | null>
  personsConnection: (args: { where?: PersonWhereInput, orderBy?: PersonOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<PersonConnection>
  rolesConnection: (args: { where?: RoleWhereInput, orderBy?: RoleOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<RoleConnection>
  dayOfWorksConnection: (args: { where?: DayOfWorkWhereInput, orderBy?: DayOfWorkOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<DayOfWorkConnection>
  usersConnection: (args: { where?: UserWhereInput, orderBy?: UserOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<UserConnection>
  node: (args: { id: ID_Output }, info?: GraphQLResolveInfo | string) => Promise<Node | null>
}

export type Mutation = {
  createPerson: (args: { data: PersonCreateInput }, info?: GraphQLResolveInfo | string) => Promise<Person>
  createRole: (args: { data: RoleCreateInput }, info?: GraphQLResolveInfo | string) => Promise<Role>
  createDayOfWork: (args: { data: DayOfWorkCreateInput }, info?: GraphQLResolveInfo | string) => Promise<DayOfWork>
  createUser: (args: { data: UserCreateInput }, info?: GraphQLResolveInfo | string) => Promise<User>
  updatePerson: (args: { data: PersonUpdateInput, where: PersonWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Person | null>
  updateRole: (args: { data: RoleUpdateInput, where: RoleWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Role | null>
  updateDayOfWork: (args: { data: DayOfWorkUpdateInput, where: DayOfWorkWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<DayOfWork | null>
  updateUser: (args: { data: UserUpdateInput, where: UserWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<User | null>
  deletePerson: (args: { where: PersonWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Person | null>
  deleteRole: (args: { where: RoleWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Role | null>
  deleteDayOfWork: (args: { where: DayOfWorkWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<DayOfWork | null>
  deleteUser: (args: { where: UserWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<User | null>
  upsertPerson: (args: { where: PersonWhereUniqueInput, create: PersonCreateInput, update: PersonUpdateInput }, info?: GraphQLResolveInfo | string) => Promise<Person>
  upsertRole: (args: { where: RoleWhereUniqueInput, create: RoleCreateInput, update: RoleUpdateInput }, info?: GraphQLResolveInfo | string) => Promise<Role>
  upsertDayOfWork: (args: { where: DayOfWorkWhereUniqueInput, create: DayOfWorkCreateInput, update: DayOfWorkUpdateInput }, info?: GraphQLResolveInfo | string) => Promise<DayOfWork>
  upsertUser: (args: { where: UserWhereUniqueInput, create: UserCreateInput, update: UserUpdateInput }, info?: GraphQLResolveInfo | string) => Promise<User>
  updateManyPersons: (args: { data: PersonUpdateInput, where: PersonWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  updateManyRoles: (args: { data: RoleUpdateInput, where: RoleWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  updateManyDayOfWorks: (args: { data: DayOfWorkUpdateInput, where: DayOfWorkWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  updateManyUsers: (args: { data: UserUpdateInput, where: UserWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  deleteManyPersons: (args: { where: PersonWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  deleteManyRoles: (args: { where: RoleWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  deleteManyDayOfWorks: (args: { where: DayOfWorkWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  deleteManyUsers: (args: { where: UserWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
}

export type Subscription = {
  person: (args: { where?: PersonSubscriptionWhereInput }, infoOrQuery?: GraphQLResolveInfo | string) => Promise<AsyncIterator<PersonSubscriptionPayload>>
  role: (args: { where?: RoleSubscriptionWhereInput }, infoOrQuery?: GraphQLResolveInfo | string) => Promise<AsyncIterator<RoleSubscriptionPayload>>
  dayOfWork: (args: { where?: DayOfWorkSubscriptionWhereInput }, infoOrQuery?: GraphQLResolveInfo | string) => Promise<AsyncIterator<DayOfWorkSubscriptionPayload>>
  user: (args: { where?: UserSubscriptionWhereInput }, infoOrQuery?: GraphQLResolveInfo | string) => Promise<AsyncIterator<UserSubscriptionPayload>>
}

export class Prisma extends BasePrisma {
  
  constructor({ endpoint, secret, fragmentReplacements, debug }: BasePrismaOptions) {
    super({ typeDefs, endpoint, secret, fragmentReplacements, debug });
  }

  exists = {
    Person: (where: PersonWhereInput): Promise<boolean> => super.existsDelegate('query', 'persons', { where }, {}, '{ id }'),
    Role: (where: RoleWhereInput): Promise<boolean> => super.existsDelegate('query', 'roles', { where }, {}, '{ id }'),
    DayOfWork: (where: DayOfWorkWhereInput): Promise<boolean> => super.existsDelegate('query', 'dayOfWorks', { where }, {}, '{ id }'),
    User: (where: UserWhereInput): Promise<boolean> => super.existsDelegate('query', 'users', { where }, {}, '{ id }')
  }

  query: Query = {
    persons: (args, info): Promise<Person[]> => super.delegate('query', 'persons', args, {}, info),
    roles: (args, info): Promise<Role[]> => super.delegate('query', 'roles', args, {}, info),
    dayOfWorks: (args, info): Promise<DayOfWork[]> => super.delegate('query', 'dayOfWorks', args, {}, info),
    users: (args, info): Promise<User[]> => super.delegate('query', 'users', args, {}, info),
    person: (args, info): Promise<Person | null> => super.delegate('query', 'person', args, {}, info),
    role: (args, info): Promise<Role | null> => super.delegate('query', 'role', args, {}, info),
    dayOfWork: (args, info): Promise<DayOfWork | null> => super.delegate('query', 'dayOfWork', args, {}, info),
    user: (args, info): Promise<User | null> => super.delegate('query', 'user', args, {}, info),
    personsConnection: (args, info): Promise<PersonConnection> => super.delegate('query', 'personsConnection', args, {}, info),
    rolesConnection: (args, info): Promise<RoleConnection> => super.delegate('query', 'rolesConnection', args, {}, info),
    dayOfWorksConnection: (args, info): Promise<DayOfWorkConnection> => super.delegate('query', 'dayOfWorksConnection', args, {}, info),
    usersConnection: (args, info): Promise<UserConnection> => super.delegate('query', 'usersConnection', args, {}, info),
    node: (args, info): Promise<Node | null> => super.delegate('query', 'node', args, {}, info)
  }

  mutation: Mutation = {
    createPerson: (args, info): Promise<Person> => super.delegate('mutation', 'createPerson', args, {}, info),
    createRole: (args, info): Promise<Role> => super.delegate('mutation', 'createRole', args, {}, info),
    createDayOfWork: (args, info): Promise<DayOfWork> => super.delegate('mutation', 'createDayOfWork', args, {}, info),
    createUser: (args, info): Promise<User> => super.delegate('mutation', 'createUser', args, {}, info),
    updatePerson: (args, info): Promise<Person | null> => super.delegate('mutation', 'updatePerson', args, {}, info),
    updateRole: (args, info): Promise<Role | null> => super.delegate('mutation', 'updateRole', args, {}, info),
    updateDayOfWork: (args, info): Promise<DayOfWork | null> => super.delegate('mutation', 'updateDayOfWork', args, {}, info),
    updateUser: (args, info): Promise<User | null> => super.delegate('mutation', 'updateUser', args, {}, info),
    deletePerson: (args, info): Promise<Person | null> => super.delegate('mutation', 'deletePerson', args, {}, info),
    deleteRole: (args, info): Promise<Role | null> => super.delegate('mutation', 'deleteRole', args, {}, info),
    deleteDayOfWork: (args, info): Promise<DayOfWork | null> => super.delegate('mutation', 'deleteDayOfWork', args, {}, info),
    deleteUser: (args, info): Promise<User | null> => super.delegate('mutation', 'deleteUser', args, {}, info),
    upsertPerson: (args, info): Promise<Person> => super.delegate('mutation', 'upsertPerson', args, {}, info),
    upsertRole: (args, info): Promise<Role> => super.delegate('mutation', 'upsertRole', args, {}, info),
    upsertDayOfWork: (args, info): Promise<DayOfWork> => super.delegate('mutation', 'upsertDayOfWork', args, {}, info),
    upsertUser: (args, info): Promise<User> => super.delegate('mutation', 'upsertUser', args, {}, info),
    updateManyPersons: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'updateManyPersons', args, {}, info),
    updateManyRoles: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'updateManyRoles', args, {}, info),
    updateManyDayOfWorks: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'updateManyDayOfWorks', args, {}, info),
    updateManyUsers: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'updateManyUsers', args, {}, info),
    deleteManyPersons: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'deleteManyPersons', args, {}, info),
    deleteManyRoles: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'deleteManyRoles', args, {}, info),
    deleteManyDayOfWorks: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'deleteManyDayOfWorks', args, {}, info),
    deleteManyUsers: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'deleteManyUsers', args, {}, info)
  }

  subscription: Subscription = {
    person: (args, infoOrQuery): Promise<AsyncIterator<PersonSubscriptionPayload>> => super.delegateSubscription('person', args, {}, infoOrQuery),
    role: (args, infoOrQuery): Promise<AsyncIterator<RoleSubscriptionPayload>> => super.delegateSubscription('role', args, {}, infoOrQuery),
    dayOfWork: (args, infoOrQuery): Promise<AsyncIterator<DayOfWorkSubscriptionPayload>> => super.delegateSubscription('dayOfWork', args, {}, infoOrQuery),
    user: (args, infoOrQuery): Promise<AsyncIterator<UserSubscriptionPayload>> => super.delegateSubscription('user', args, {}, infoOrQuery)
  }
}