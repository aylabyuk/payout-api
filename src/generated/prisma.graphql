# THIS FILE HAS BEEN AUTO-GENERATED BY "PRISMA DEPLOY"
# DO NOT EDIT THIS FILE DIRECTLY

#
# Model Types
#

type DayOfWork implements Node {
  id: ID!
  person(where: PersonWhereInput): Person!
  date: DateTime!
  startTime: DateTime!
  endTime: DateTime!
  paid: Boolean!
}

type Person implements Node {
  id: ID!
  firstName: String!
  lastName: String!
  gender: Gender!
  birthDate: DateTime!
  address: String!
  position(where: PositionWhereInput): Position
  daysOfWork(where: DayOfWorkWhereInput, orderBy: DayOfWorkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [DayOfWork!]
}

type Position implements Node {
  id: ID!
  name: String!
  description: String
  ratePerHour: Int!
  staffs(where: PersonWhereInput, orderBy: PersonOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Person!]
}

type Post implements Node {
  id: ID!
  isPublished: Boolean!
  title: String!
  text: String!
}


#
# Other Types
#

type AggregateDayOfWork {
  count: Int!
}

type AggregatePerson {
  count: Int!
}

type AggregatePosition {
  count: Int!
}

type AggregatePost {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar DateTime

type DayOfWorkConnection {
  pageInfo: PageInfo!
  edges: [DayOfWorkEdge]!
  aggregate: AggregateDayOfWork!
}

input DayOfWorkCreateInput {
  date: DateTime!
  startTime: DateTime!
  endTime: DateTime!
  paid: Boolean
  person: PersonCreateOneWithoutDaysOfWorkInput!
}

input DayOfWorkCreateManyWithoutPersonInput {
  create: [DayOfWorkCreateWithoutPersonInput!]
  connect: [DayOfWorkWhereUniqueInput!]
}

input DayOfWorkCreateWithoutPersonInput {
  date: DateTime!
  startTime: DateTime!
  endTime: DateTime!
  paid: Boolean
}

type DayOfWorkEdge {
  node: DayOfWork!
  cursor: String!
}

enum DayOfWorkOrderByInput {
  id_ASC
  id_DESC
  date_ASC
  date_DESC
  startTime_ASC
  startTime_DESC
  endTime_ASC
  endTime_DESC
  paid_ASC
  paid_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type DayOfWorkPreviousValues {
  id: ID!
  date: DateTime!
  startTime: DateTime!
  endTime: DateTime!
  paid: Boolean!
}

type DayOfWorkSubscriptionPayload {
  mutation: MutationType!
  node: DayOfWork
  updatedFields: [String!]
  previousValues: DayOfWorkPreviousValues
}

input DayOfWorkSubscriptionWhereInput {
  AND: [DayOfWorkSubscriptionWhereInput!]
  OR: [DayOfWorkSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: DayOfWorkWhereInput
}

input DayOfWorkUpdateInput {
  date: DateTime
  startTime: DateTime
  endTime: DateTime
  paid: Boolean
  person: PersonUpdateOneWithoutDaysOfWorkInput
}

input DayOfWorkUpdateManyWithoutPersonInput {
  create: [DayOfWorkCreateWithoutPersonInput!]
  connect: [DayOfWorkWhereUniqueInput!]
  disconnect: [DayOfWorkWhereUniqueInput!]
  delete: [DayOfWorkWhereUniqueInput!]
  update: [DayOfWorkUpdateWithoutPersonInput!]
  upsert: [DayOfWorkUpsertWithoutPersonInput!]
}

input DayOfWorkUpdateWithoutPersonDataInput {
  date: DateTime
  startTime: DateTime
  endTime: DateTime
  paid: Boolean
}

input DayOfWorkUpdateWithoutPersonInput {
  where: DayOfWorkWhereUniqueInput!
  data: DayOfWorkUpdateWithoutPersonDataInput!
}

input DayOfWorkUpsertWithoutPersonInput {
  where: DayOfWorkWhereUniqueInput!
  update: DayOfWorkUpdateWithoutPersonDataInput!
  create: DayOfWorkCreateWithoutPersonInput!
}

input DayOfWorkWhereInput {
  AND: [DayOfWorkWhereInput!]
  OR: [DayOfWorkWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  date: DateTime
  date_not: DateTime
  date_in: [DateTime!]
  date_not_in: [DateTime!]
  date_lt: DateTime
  date_lte: DateTime
  date_gt: DateTime
  date_gte: DateTime
  startTime: DateTime
  startTime_not: DateTime
  startTime_in: [DateTime!]
  startTime_not_in: [DateTime!]
  startTime_lt: DateTime
  startTime_lte: DateTime
  startTime_gt: DateTime
  startTime_gte: DateTime
  endTime: DateTime
  endTime_not: DateTime
  endTime_in: [DateTime!]
  endTime_not_in: [DateTime!]
  endTime_lt: DateTime
  endTime_lte: DateTime
  endTime_gt: DateTime
  endTime_gte: DateTime
  paid: Boolean
  paid_not: Boolean
  person: PersonWhereInput
}

input DayOfWorkWhereUniqueInput {
  id: ID
}

enum Gender {
  MALE
  FEMALE
}

scalar Long

type Mutation {
  createPost(data: PostCreateInput!): Post!
  createPerson(data: PersonCreateInput!): Person!
  createPosition(data: PositionCreateInput!): Position!
  createDayOfWork(data: DayOfWorkCreateInput!): DayOfWork!
  updatePost(data: PostUpdateInput!, where: PostWhereUniqueInput!): Post
  updatePerson(data: PersonUpdateInput!, where: PersonWhereUniqueInput!): Person
  updatePosition(data: PositionUpdateInput!, where: PositionWhereUniqueInput!): Position
  updateDayOfWork(data: DayOfWorkUpdateInput!, where: DayOfWorkWhereUniqueInput!): DayOfWork
  deletePost(where: PostWhereUniqueInput!): Post
  deletePerson(where: PersonWhereUniqueInput!): Person
  deletePosition(where: PositionWhereUniqueInput!): Position
  deleteDayOfWork(where: DayOfWorkWhereUniqueInput!): DayOfWork
  upsertPost(where: PostWhereUniqueInput!, create: PostCreateInput!, update: PostUpdateInput!): Post!
  upsertPerson(where: PersonWhereUniqueInput!, create: PersonCreateInput!, update: PersonUpdateInput!): Person!
  upsertPosition(where: PositionWhereUniqueInput!, create: PositionCreateInput!, update: PositionUpdateInput!): Position!
  upsertDayOfWork(where: DayOfWorkWhereUniqueInput!, create: DayOfWorkCreateInput!, update: DayOfWorkUpdateInput!): DayOfWork!
  updateManyPosts(data: PostUpdateInput!, where: PostWhereInput!): BatchPayload!
  updateManyPersons(data: PersonUpdateInput!, where: PersonWhereInput!): BatchPayload!
  updateManyPositions(data: PositionUpdateInput!, where: PositionWhereInput!): BatchPayload!
  updateManyDayOfWorks(data: DayOfWorkUpdateInput!, where: DayOfWorkWhereInput!): BatchPayload!
  deleteManyPosts(where: PostWhereInput!): BatchPayload!
  deleteManyPersons(where: PersonWhereInput!): BatchPayload!
  deleteManyPositions(where: PositionWhereInput!): BatchPayload!
  deleteManyDayOfWorks(where: DayOfWorkWhereInput!): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type PersonConnection {
  pageInfo: PageInfo!
  edges: [PersonEdge]!
  aggregate: AggregatePerson!
}

input PersonCreateInput {
  firstName: String!
  lastName: String!
  gender: Gender!
  birthDate: DateTime!
  address: String!
  position: PositionCreateOneWithoutStaffsInput
  daysOfWork: DayOfWorkCreateManyWithoutPersonInput
}

input PersonCreateManyWithoutPositionInput {
  create: [PersonCreateWithoutPositionInput!]
  connect: [PersonWhereUniqueInput!]
}

input PersonCreateOneWithoutDaysOfWorkInput {
  create: PersonCreateWithoutDaysOfWorkInput
  connect: PersonWhereUniqueInput
}

input PersonCreateWithoutDaysOfWorkInput {
  firstName: String!
  lastName: String!
  gender: Gender!
  birthDate: DateTime!
  address: String!
  position: PositionCreateOneWithoutStaffsInput
}

input PersonCreateWithoutPositionInput {
  firstName: String!
  lastName: String!
  gender: Gender!
  birthDate: DateTime!
  address: String!
  daysOfWork: DayOfWorkCreateManyWithoutPersonInput
}

type PersonEdge {
  node: Person!
  cursor: String!
}

enum PersonOrderByInput {
  id_ASC
  id_DESC
  firstName_ASC
  firstName_DESC
  lastName_ASC
  lastName_DESC
  gender_ASC
  gender_DESC
  birthDate_ASC
  birthDate_DESC
  address_ASC
  address_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type PersonPreviousValues {
  id: ID!
  firstName: String!
  lastName: String!
  gender: Gender!
  birthDate: DateTime!
  address: String!
}

type PersonSubscriptionPayload {
  mutation: MutationType!
  node: Person
  updatedFields: [String!]
  previousValues: PersonPreviousValues
}

input PersonSubscriptionWhereInput {
  AND: [PersonSubscriptionWhereInput!]
  OR: [PersonSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PersonWhereInput
}

input PersonUpdateInput {
  firstName: String
  lastName: String
  gender: Gender
  birthDate: DateTime
  address: String
  position: PositionUpdateOneWithoutStaffsInput
  daysOfWork: DayOfWorkUpdateManyWithoutPersonInput
}

input PersonUpdateManyWithoutPositionInput {
  create: [PersonCreateWithoutPositionInput!]
  connect: [PersonWhereUniqueInput!]
  disconnect: [PersonWhereUniqueInput!]
  delete: [PersonWhereUniqueInput!]
  update: [PersonUpdateWithoutPositionInput!]
  upsert: [PersonUpsertWithoutPositionInput!]
}

input PersonUpdateOneWithoutDaysOfWorkInput {
  create: PersonCreateWithoutDaysOfWorkInput
  connect: PersonWhereUniqueInput
  disconnect: PersonWhereUniqueInput
  delete: PersonWhereUniqueInput
  update: PersonUpdateWithoutDaysOfWorkInput
  upsert: PersonUpsertWithoutDaysOfWorkInput
}

input PersonUpdateWithoutDaysOfWorkDataInput {
  firstName: String
  lastName: String
  gender: Gender
  birthDate: DateTime
  address: String
  position: PositionUpdateOneWithoutStaffsInput
}

input PersonUpdateWithoutDaysOfWorkInput {
  where: PersonWhereUniqueInput!
  data: PersonUpdateWithoutDaysOfWorkDataInput!
}

input PersonUpdateWithoutPositionDataInput {
  firstName: String
  lastName: String
  gender: Gender
  birthDate: DateTime
  address: String
  daysOfWork: DayOfWorkUpdateManyWithoutPersonInput
}

input PersonUpdateWithoutPositionInput {
  where: PersonWhereUniqueInput!
  data: PersonUpdateWithoutPositionDataInput!
}

input PersonUpsertWithoutDaysOfWorkInput {
  where: PersonWhereUniqueInput!
  update: PersonUpdateWithoutDaysOfWorkDataInput!
  create: PersonCreateWithoutDaysOfWorkInput!
}

input PersonUpsertWithoutPositionInput {
  where: PersonWhereUniqueInput!
  update: PersonUpdateWithoutPositionDataInput!
  create: PersonCreateWithoutPositionInput!
}

input PersonWhereInput {
  AND: [PersonWhereInput!]
  OR: [PersonWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  firstName: String
  firstName_not: String
  firstName_in: [String!]
  firstName_not_in: [String!]
  firstName_lt: String
  firstName_lte: String
  firstName_gt: String
  firstName_gte: String
  firstName_contains: String
  firstName_not_contains: String
  firstName_starts_with: String
  firstName_not_starts_with: String
  firstName_ends_with: String
  firstName_not_ends_with: String
  lastName: String
  lastName_not: String
  lastName_in: [String!]
  lastName_not_in: [String!]
  lastName_lt: String
  lastName_lte: String
  lastName_gt: String
  lastName_gte: String
  lastName_contains: String
  lastName_not_contains: String
  lastName_starts_with: String
  lastName_not_starts_with: String
  lastName_ends_with: String
  lastName_not_ends_with: String
  gender: Gender
  gender_not: Gender
  gender_in: [Gender!]
  gender_not_in: [Gender!]
  birthDate: DateTime
  birthDate_not: DateTime
  birthDate_in: [DateTime!]
  birthDate_not_in: [DateTime!]
  birthDate_lt: DateTime
  birthDate_lte: DateTime
  birthDate_gt: DateTime
  birthDate_gte: DateTime
  address: String
  address_not: String
  address_in: [String!]
  address_not_in: [String!]
  address_lt: String
  address_lte: String
  address_gt: String
  address_gte: String
  address_contains: String
  address_not_contains: String
  address_starts_with: String
  address_not_starts_with: String
  address_ends_with: String
  address_not_ends_with: String
  position: PositionWhereInput
  daysOfWork_every: DayOfWorkWhereInput
  daysOfWork_some: DayOfWorkWhereInput
  daysOfWork_none: DayOfWorkWhereInput
}

input PersonWhereUniqueInput {
  id: ID
}

type PositionConnection {
  pageInfo: PageInfo!
  edges: [PositionEdge]!
  aggregate: AggregatePosition!
}

input PositionCreateInput {
  name: String!
  description: String
  ratePerHour: Int!
  staffs: PersonCreateManyWithoutPositionInput
}

input PositionCreateOneWithoutStaffsInput {
  create: PositionCreateWithoutStaffsInput
  connect: PositionWhereUniqueInput
}

input PositionCreateWithoutStaffsInput {
  name: String!
  description: String
  ratePerHour: Int!
}

type PositionEdge {
  node: Position!
  cursor: String!
}

enum PositionOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  ratePerHour_ASC
  ratePerHour_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type PositionPreviousValues {
  id: ID!
  name: String!
  description: String
  ratePerHour: Int!
}

type PositionSubscriptionPayload {
  mutation: MutationType!
  node: Position
  updatedFields: [String!]
  previousValues: PositionPreviousValues
}

input PositionSubscriptionWhereInput {
  AND: [PositionSubscriptionWhereInput!]
  OR: [PositionSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PositionWhereInput
}

input PositionUpdateInput {
  name: String
  description: String
  ratePerHour: Int
  staffs: PersonUpdateManyWithoutPositionInput
}

input PositionUpdateOneWithoutStaffsInput {
  create: PositionCreateWithoutStaffsInput
  connect: PositionWhereUniqueInput
  disconnect: PositionWhereUniqueInput
  delete: PositionWhereUniqueInput
  update: PositionUpdateWithoutStaffsInput
  upsert: PositionUpsertWithoutStaffsInput
}

input PositionUpdateWithoutStaffsDataInput {
  name: String
  description: String
  ratePerHour: Int
}

input PositionUpdateWithoutStaffsInput {
  where: PositionWhereUniqueInput!
  data: PositionUpdateWithoutStaffsDataInput!
}

input PositionUpsertWithoutStaffsInput {
  where: PositionWhereUniqueInput!
  update: PositionUpdateWithoutStaffsDataInput!
  create: PositionCreateWithoutStaffsInput!
}

input PositionWhereInput {
  AND: [PositionWhereInput!]
  OR: [PositionWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  ratePerHour: Int
  ratePerHour_not: Int
  ratePerHour_in: [Int!]
  ratePerHour_not_in: [Int!]
  ratePerHour_lt: Int
  ratePerHour_lte: Int
  ratePerHour_gt: Int
  ratePerHour_gte: Int
  staffs_every: PersonWhereInput
  staffs_some: PersonWhereInput
  staffs_none: PersonWhereInput
}

input PositionWhereUniqueInput {
  id: ID
}

type PostConnection {
  pageInfo: PageInfo!
  edges: [PostEdge]!
  aggregate: AggregatePost!
}

input PostCreateInput {
  isPublished: Boolean
  title: String!
  text: String!
}

type PostEdge {
  node: Post!
  cursor: String!
}

enum PostOrderByInput {
  id_ASC
  id_DESC
  isPublished_ASC
  isPublished_DESC
  title_ASC
  title_DESC
  text_ASC
  text_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type PostPreviousValues {
  id: ID!
  isPublished: Boolean!
  title: String!
  text: String!
}

type PostSubscriptionPayload {
  mutation: MutationType!
  node: Post
  updatedFields: [String!]
  previousValues: PostPreviousValues
}

input PostSubscriptionWhereInput {
  AND: [PostSubscriptionWhereInput!]
  OR: [PostSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PostWhereInput
}

input PostUpdateInput {
  isPublished: Boolean
  title: String
  text: String
}

input PostWhereInput {
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  isPublished: Boolean
  isPublished_not: Boolean
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
}

input PostWhereUniqueInput {
  id: ID
}

type Query {
  posts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post]!
  persons(where: PersonWhereInput, orderBy: PersonOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Person]!
  positions(where: PositionWhereInput, orderBy: PositionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Position]!
  dayOfWorks(where: DayOfWorkWhereInput, orderBy: DayOfWorkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [DayOfWork]!
  post(where: PostWhereUniqueInput!): Post
  person(where: PersonWhereUniqueInput!): Person
  position(where: PositionWhereUniqueInput!): Position
  dayOfWork(where: DayOfWorkWhereUniqueInput!): DayOfWork
  postsConnection(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PostConnection!
  personsConnection(where: PersonWhereInput, orderBy: PersonOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PersonConnection!
  positionsConnection(where: PositionWhereInput, orderBy: PositionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PositionConnection!
  dayOfWorksConnection(where: DayOfWorkWhereInput, orderBy: DayOfWorkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): DayOfWorkConnection!
  node(id: ID!): Node
}

type Subscription {
  post(where: PostSubscriptionWhereInput): PostSubscriptionPayload
  person(where: PersonSubscriptionWhereInput): PersonSubscriptionPayload
  position(where: PositionSubscriptionWhereInput): PositionSubscriptionPayload
  dayOfWork(where: DayOfWorkSubscriptionWhereInput): DayOfWorkSubscriptionPayload
}
