# THIS FILE HAS BEEN AUTO-GENERATED BY "PRISMA DEPLOY"
# DO NOT EDIT THIS FILE DIRECTLY

#
# Model Types
#

type DayOfWork implements Node {
  id: ID!
  person(where: PersonWhereInput): Person!
  date: DateTime!
  startTime: DateTime!
  endTime: DateTime!
  amount: Int!
  paid: Boolean!
}

type Person implements Node {
  id: ID!
  firstName: String!
  lastName: String!
  gender: Gender!
  birthDate: DateTime!
  address: String!
  role(where: RoleWhereInput): Role
  daysOfWork(where: DayOfWorkWhereInput, orderBy: DayOfWorkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [DayOfWork!]
}

type Role implements Node {
  id: ID!
  name: String!
  description: String
  ratePerHour: Int!
  staffs(where: PersonWhereInput, orderBy: PersonOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Person!]
}

type User implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  email: String!
  password: String!
}


#
# Other Types
#

type AggregateDayOfWork {
  count: Int!
}

type AggregatePerson {
  count: Int!
}

type AggregateRole {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar DateTime

type DayOfWorkConnection {
  pageInfo: PageInfo!
  edges: [DayOfWorkEdge]!
  aggregate: AggregateDayOfWork!
}

input DayOfWorkCreateInput {
  date: DateTime!
  startTime: DateTime!
  endTime: DateTime!
  amount: Int!
  paid: Boolean
  person: PersonCreateOneWithoutDaysOfWorkInput!
}

input DayOfWorkCreateManyWithoutPersonInput {
  create: [DayOfWorkCreateWithoutPersonInput!]
  connect: [DayOfWorkWhereUniqueInput!]
}

input DayOfWorkCreateWithoutPersonInput {
  date: DateTime!
  startTime: DateTime!
  endTime: DateTime!
  amount: Int!
  paid: Boolean
}

type DayOfWorkEdge {
  node: DayOfWork!
  cursor: String!
}

enum DayOfWorkOrderByInput {
  id_ASC
  id_DESC
  date_ASC
  date_DESC
  startTime_ASC
  startTime_DESC
  endTime_ASC
  endTime_DESC
  amount_ASC
  amount_DESC
  paid_ASC
  paid_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type DayOfWorkPreviousValues {
  id: ID!
  date: DateTime!
  startTime: DateTime!
  endTime: DateTime!
  amount: Int!
  paid: Boolean!
}

type DayOfWorkSubscriptionPayload {
  mutation: MutationType!
  node: DayOfWork
  updatedFields: [String!]
  previousValues: DayOfWorkPreviousValues
}

input DayOfWorkSubscriptionWhereInput {
  AND: [DayOfWorkSubscriptionWhereInput!]
  OR: [DayOfWorkSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: DayOfWorkWhereInput
}

input DayOfWorkUpdateInput {
  date: DateTime
  startTime: DateTime
  endTime: DateTime
  amount: Int
  paid: Boolean
  person: PersonUpdateOneWithoutDaysOfWorkInput
}

input DayOfWorkUpdateManyWithoutPersonInput {
  create: [DayOfWorkCreateWithoutPersonInput!]
  connect: [DayOfWorkWhereUniqueInput!]
  disconnect: [DayOfWorkWhereUniqueInput!]
  delete: [DayOfWorkWhereUniqueInput!]
  update: [DayOfWorkUpdateWithoutPersonInput!]
  upsert: [DayOfWorkUpsertWithoutPersonInput!]
}

input DayOfWorkUpdateWithoutPersonDataInput {
  date: DateTime
  startTime: DateTime
  endTime: DateTime
  amount: Int
  paid: Boolean
}

input DayOfWorkUpdateWithoutPersonInput {
  where: DayOfWorkWhereUniqueInput!
  data: DayOfWorkUpdateWithoutPersonDataInput!
}

input DayOfWorkUpsertWithoutPersonInput {
  where: DayOfWorkWhereUniqueInput!
  update: DayOfWorkUpdateWithoutPersonDataInput!
  create: DayOfWorkCreateWithoutPersonInput!
}

input DayOfWorkWhereInput {
  AND: [DayOfWorkWhereInput!]
  OR: [DayOfWorkWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  date: DateTime
  date_not: DateTime
  date_in: [DateTime!]
  date_not_in: [DateTime!]
  date_lt: DateTime
  date_lte: DateTime
  date_gt: DateTime
  date_gte: DateTime
  startTime: DateTime
  startTime_not: DateTime
  startTime_in: [DateTime!]
  startTime_not_in: [DateTime!]
  startTime_lt: DateTime
  startTime_lte: DateTime
  startTime_gt: DateTime
  startTime_gte: DateTime
  endTime: DateTime
  endTime_not: DateTime
  endTime_in: [DateTime!]
  endTime_not_in: [DateTime!]
  endTime_lt: DateTime
  endTime_lte: DateTime
  endTime_gt: DateTime
  endTime_gte: DateTime
  amount: Int
  amount_not: Int
  amount_in: [Int!]
  amount_not_in: [Int!]
  amount_lt: Int
  amount_lte: Int
  amount_gt: Int
  amount_gte: Int
  paid: Boolean
  paid_not: Boolean
  person: PersonWhereInput
}

input DayOfWorkWhereUniqueInput {
  id: ID
}

enum Gender {
  MALE
  FEMALE
}

scalar Long

type Mutation {
  createPerson(data: PersonCreateInput!): Person!
  createRole(data: RoleCreateInput!): Role!
  createDayOfWork(data: DayOfWorkCreateInput!): DayOfWork!
  createUser(data: UserCreateInput!): User!
  updatePerson(data: PersonUpdateInput!, where: PersonWhereUniqueInput!): Person
  updateRole(data: RoleUpdateInput!, where: RoleWhereUniqueInput!): Role
  updateDayOfWork(data: DayOfWorkUpdateInput!, where: DayOfWorkWhereUniqueInput!): DayOfWork
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  deletePerson(where: PersonWhereUniqueInput!): Person
  deleteRole(where: RoleWhereUniqueInput!): Role
  deleteDayOfWork(where: DayOfWorkWhereUniqueInput!): DayOfWork
  deleteUser(where: UserWhereUniqueInput!): User
  upsertPerson(where: PersonWhereUniqueInput!, create: PersonCreateInput!, update: PersonUpdateInput!): Person!
  upsertRole(where: RoleWhereUniqueInput!, create: RoleCreateInput!, update: RoleUpdateInput!): Role!
  upsertDayOfWork(where: DayOfWorkWhereUniqueInput!, create: DayOfWorkCreateInput!, update: DayOfWorkUpdateInput!): DayOfWork!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  updateManyPersons(data: PersonUpdateInput!, where: PersonWhereInput!): BatchPayload!
  updateManyRoles(data: RoleUpdateInput!, where: RoleWhereInput!): BatchPayload!
  updateManyDayOfWorks(data: DayOfWorkUpdateInput!, where: DayOfWorkWhereInput!): BatchPayload!
  updateManyUsers(data: UserUpdateInput!, where: UserWhereInput!): BatchPayload!
  deleteManyPersons(where: PersonWhereInput!): BatchPayload!
  deleteManyRoles(where: RoleWhereInput!): BatchPayload!
  deleteManyDayOfWorks(where: DayOfWorkWhereInput!): BatchPayload!
  deleteManyUsers(where: UserWhereInput!): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type PersonConnection {
  pageInfo: PageInfo!
  edges: [PersonEdge]!
  aggregate: AggregatePerson!
}

input PersonCreateInput {
  firstName: String!
  lastName: String!
  gender: Gender!
  birthDate: DateTime!
  address: String!
  role: RoleCreateOneWithoutStaffsInput
  daysOfWork: DayOfWorkCreateManyWithoutPersonInput
}

input PersonCreateManyWithoutRoleInput {
  create: [PersonCreateWithoutRoleInput!]
  connect: [PersonWhereUniqueInput!]
}

input PersonCreateOneWithoutDaysOfWorkInput {
  create: PersonCreateWithoutDaysOfWorkInput
  connect: PersonWhereUniqueInput
}

input PersonCreateWithoutDaysOfWorkInput {
  firstName: String!
  lastName: String!
  gender: Gender!
  birthDate: DateTime!
  address: String!
  role: RoleCreateOneWithoutStaffsInput
}

input PersonCreateWithoutRoleInput {
  firstName: String!
  lastName: String!
  gender: Gender!
  birthDate: DateTime!
  address: String!
  daysOfWork: DayOfWorkCreateManyWithoutPersonInput
}

type PersonEdge {
  node: Person!
  cursor: String!
}

enum PersonOrderByInput {
  id_ASC
  id_DESC
  firstName_ASC
  firstName_DESC
  lastName_ASC
  lastName_DESC
  gender_ASC
  gender_DESC
  birthDate_ASC
  birthDate_DESC
  address_ASC
  address_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type PersonPreviousValues {
  id: ID!
  firstName: String!
  lastName: String!
  gender: Gender!
  birthDate: DateTime!
  address: String!
}

type PersonSubscriptionPayload {
  mutation: MutationType!
  node: Person
  updatedFields: [String!]
  previousValues: PersonPreviousValues
}

input PersonSubscriptionWhereInput {
  AND: [PersonSubscriptionWhereInput!]
  OR: [PersonSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PersonWhereInput
}

input PersonUpdateInput {
  firstName: String
  lastName: String
  gender: Gender
  birthDate: DateTime
  address: String
  role: RoleUpdateOneWithoutStaffsInput
  daysOfWork: DayOfWorkUpdateManyWithoutPersonInput
}

input PersonUpdateManyWithoutRoleInput {
  create: [PersonCreateWithoutRoleInput!]
  connect: [PersonWhereUniqueInput!]
  disconnect: [PersonWhereUniqueInput!]
  delete: [PersonWhereUniqueInput!]
  update: [PersonUpdateWithoutRoleInput!]
  upsert: [PersonUpsertWithoutRoleInput!]
}

input PersonUpdateOneWithoutDaysOfWorkInput {
  create: PersonCreateWithoutDaysOfWorkInput
  connect: PersonWhereUniqueInput
  disconnect: PersonWhereUniqueInput
  delete: PersonWhereUniqueInput
  update: PersonUpdateWithoutDaysOfWorkInput
  upsert: PersonUpsertWithoutDaysOfWorkInput
}

input PersonUpdateWithoutDaysOfWorkDataInput {
  firstName: String
  lastName: String
  gender: Gender
  birthDate: DateTime
  address: String
  role: RoleUpdateOneWithoutStaffsInput
}

input PersonUpdateWithoutDaysOfWorkInput {
  where: PersonWhereUniqueInput!
  data: PersonUpdateWithoutDaysOfWorkDataInput!
}

input PersonUpdateWithoutRoleDataInput {
  firstName: String
  lastName: String
  gender: Gender
  birthDate: DateTime
  address: String
  daysOfWork: DayOfWorkUpdateManyWithoutPersonInput
}

input PersonUpdateWithoutRoleInput {
  where: PersonWhereUniqueInput!
  data: PersonUpdateWithoutRoleDataInput!
}

input PersonUpsertWithoutDaysOfWorkInput {
  where: PersonWhereUniqueInput!
  update: PersonUpdateWithoutDaysOfWorkDataInput!
  create: PersonCreateWithoutDaysOfWorkInput!
}

input PersonUpsertWithoutRoleInput {
  where: PersonWhereUniqueInput!
  update: PersonUpdateWithoutRoleDataInput!
  create: PersonCreateWithoutRoleInput!
}

input PersonWhereInput {
  AND: [PersonWhereInput!]
  OR: [PersonWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  firstName: String
  firstName_not: String
  firstName_in: [String!]
  firstName_not_in: [String!]
  firstName_lt: String
  firstName_lte: String
  firstName_gt: String
  firstName_gte: String
  firstName_contains: String
  firstName_not_contains: String
  firstName_starts_with: String
  firstName_not_starts_with: String
  firstName_ends_with: String
  firstName_not_ends_with: String
  lastName: String
  lastName_not: String
  lastName_in: [String!]
  lastName_not_in: [String!]
  lastName_lt: String
  lastName_lte: String
  lastName_gt: String
  lastName_gte: String
  lastName_contains: String
  lastName_not_contains: String
  lastName_starts_with: String
  lastName_not_starts_with: String
  lastName_ends_with: String
  lastName_not_ends_with: String
  gender: Gender
  gender_not: Gender
  gender_in: [Gender!]
  gender_not_in: [Gender!]
  birthDate: DateTime
  birthDate_not: DateTime
  birthDate_in: [DateTime!]
  birthDate_not_in: [DateTime!]
  birthDate_lt: DateTime
  birthDate_lte: DateTime
  birthDate_gt: DateTime
  birthDate_gte: DateTime
  address: String
  address_not: String
  address_in: [String!]
  address_not_in: [String!]
  address_lt: String
  address_lte: String
  address_gt: String
  address_gte: String
  address_contains: String
  address_not_contains: String
  address_starts_with: String
  address_not_starts_with: String
  address_ends_with: String
  address_not_ends_with: String
  role: RoleWhereInput
  daysOfWork_every: DayOfWorkWhereInput
  daysOfWork_some: DayOfWorkWhereInput
  daysOfWork_none: DayOfWorkWhereInput
}

input PersonWhereUniqueInput {
  id: ID
}

type Query {
  persons(where: PersonWhereInput, orderBy: PersonOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Person]!
  roles(where: RoleWhereInput, orderBy: RoleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Role]!
  dayOfWorks(where: DayOfWorkWhereInput, orderBy: DayOfWorkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [DayOfWork]!
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  person(where: PersonWhereUniqueInput!): Person
  role(where: RoleWhereUniqueInput!): Role
  dayOfWork(where: DayOfWorkWhereUniqueInput!): DayOfWork
  user(where: UserWhereUniqueInput!): User
  personsConnection(where: PersonWhereInput, orderBy: PersonOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PersonConnection!
  rolesConnection(where: RoleWhereInput, orderBy: RoleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): RoleConnection!
  dayOfWorksConnection(where: DayOfWorkWhereInput, orderBy: DayOfWorkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): DayOfWorkConnection!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type RoleConnection {
  pageInfo: PageInfo!
  edges: [RoleEdge]!
  aggregate: AggregateRole!
}

input RoleCreateInput {
  name: String!
  description: String
  ratePerHour: Int!
  staffs: PersonCreateManyWithoutRoleInput
}

input RoleCreateOneWithoutStaffsInput {
  create: RoleCreateWithoutStaffsInput
  connect: RoleWhereUniqueInput
}

input RoleCreateWithoutStaffsInput {
  name: String!
  description: String
  ratePerHour: Int!
}

type RoleEdge {
  node: Role!
  cursor: String!
}

enum RoleOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  ratePerHour_ASC
  ratePerHour_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type RolePreviousValues {
  id: ID!
  name: String!
  description: String
  ratePerHour: Int!
}

type RoleSubscriptionPayload {
  mutation: MutationType!
  node: Role
  updatedFields: [String!]
  previousValues: RolePreviousValues
}

input RoleSubscriptionWhereInput {
  AND: [RoleSubscriptionWhereInput!]
  OR: [RoleSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: RoleWhereInput
}

input RoleUpdateInput {
  name: String
  description: String
  ratePerHour: Int
  staffs: PersonUpdateManyWithoutRoleInput
}

input RoleUpdateOneWithoutStaffsInput {
  create: RoleCreateWithoutStaffsInput
  connect: RoleWhereUniqueInput
  disconnect: RoleWhereUniqueInput
  delete: RoleWhereUniqueInput
  update: RoleUpdateWithoutStaffsInput
  upsert: RoleUpsertWithoutStaffsInput
}

input RoleUpdateWithoutStaffsDataInput {
  name: String
  description: String
  ratePerHour: Int
}

input RoleUpdateWithoutStaffsInput {
  where: RoleWhereUniqueInput!
  data: RoleUpdateWithoutStaffsDataInput!
}

input RoleUpsertWithoutStaffsInput {
  where: RoleWhereUniqueInput!
  update: RoleUpdateWithoutStaffsDataInput!
  create: RoleCreateWithoutStaffsInput!
}

input RoleWhereInput {
  AND: [RoleWhereInput!]
  OR: [RoleWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  ratePerHour: Int
  ratePerHour_not: Int
  ratePerHour_in: [Int!]
  ratePerHour_not_in: [Int!]
  ratePerHour_lt: Int
  ratePerHour_lte: Int
  ratePerHour_gt: Int
  ratePerHour_gte: Int
  staffs_every: PersonWhereInput
  staffs_some: PersonWhereInput
  staffs_none: PersonWhereInput
}

input RoleWhereUniqueInput {
  id: ID
  name: String
}

type Subscription {
  person(where: PersonSubscriptionWhereInput): PersonSubscriptionPayload
  role(where: RoleSubscriptionWhereInput): RoleSubscriptionPayload
  dayOfWork(where: DayOfWorkSubscriptionWhereInput): DayOfWorkSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  email: String!
  password: String!
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
}

type UserPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  email: String!
  password: String!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateInput {
  email: String
  password: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
